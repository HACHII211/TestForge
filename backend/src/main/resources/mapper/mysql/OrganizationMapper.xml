<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.mapper.mysql.OrganizationMapper">

    <!-- resultMap，明确字段映射到 User 实体属性 -->
    <resultMap id="UserResultMap" type="com.example.entity.User">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="email" column="email"/>
        <result property="departmentId" column="department_id"/>
        <result property="roleId" column="role_id"/>
        <result property="status" column="status"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="departmentName" column="departmentName"/>
        <result property="roleName" column="roleName"/>
    </resultMap>

    <!-- 插入 user：使用 useGeneratedKeys 回填自增 id -->
    <insert id="addUser" parameterType="com.example.entity.User"
            useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO `user`
        (username, password, email, status, created_at, updated_at, role_id, department_id)
        VALUES
            (#{username}, 'TestForge', #{email}, #{status}, #{createdAt}, #{updatedAt}, #{roleId}, #{departmentId})
    </insert>

    <!-- 更新 user（只更新 user 表） -->
    <update id="updateUser" parameterType="com.example.entity.User">
        UPDATE `user`
        SET
            username = #{username},
            email = #{email},
            department_id = #{departmentId},
            role_id = #{roleId},
            status = #{status},
            updated_at = #{updatedAt}
        WHERE id = #{id}
    </update>

    <delete id="deleteUser" parameterType="int">
        DELETE FROM `user` WHERE id = #{id}
    </delete>

    <select id="selectAll" resultMap="UserResultMap">
        SELECT u.id, u.username, u.password, u.email, u.department_id, u.role_id, u.status, u.created_at, u.updated_at,
               d.name AS departmentName, r.name AS roleName
        FROM `user` u
                 LEFT JOIN department d ON u.department_id = d.id
                 LEFT JOIN role r ON u.role_id = r.id
        ORDER BY u.id DESC

    </select>

    <select id="selectByFilters" parameterType="com.example.entity.User" resultMap="UserResultMap">
        SELECT u.id, u.username, u.password, u.email, u.department_id, u.role_id, u.status, u.created_at, u.updated_at,
               d.name AS departmentName, r.name AS roleName
        FROM `user` u
                 LEFT JOIN department d ON u.department_id = d.id
                 LEFT JOIN role r ON u.role_id = r.id
        <where>
            <if test="username != null and username != ''">
                and u.username LIKE CONCAT('%', #{username}, '%')
            </if>

            <if test="departmentId != null">
                and u.department_id = #{departmentId}
            </if>

            <if test="roleId != null">
                and u.role_id = #{roleId}
            </if>

        </where>
        ORDER BY u.id DESC
    </select>

    <select id="selectById" parameterType="int" resultMap="UserResultMap">
        SELECT u.id, u.username, u.password, u.email, u.department_id, u.role_id, u.status, u.created_at, u.updated_at,
               d.name AS departmentName, r.name AS roleName
        FROM `user` u
                 LEFT JOIN department d ON u.department_id = d.id
                 LEFT JOIN role r ON u.role_id = r.id
        WHERE u.id = #{id}
    </select>

</mapper>
