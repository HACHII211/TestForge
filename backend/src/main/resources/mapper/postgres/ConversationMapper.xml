<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.postgres.ConversationMapper">

    <resultMap id="ConversationMap" type="com.example.entity.Conversation">
        <id column="id" property="id"/>
        <result column="conversation_uuid" property="conversationUuid"/>
        <result column="user_id" property="userId"/>
        <result column="assistant_id" property="assistantId"/>
        <result column="messages" property="messages"/>
        <result column="metadata" property="metadata"/>
        <result column="last_activity" property="lastActivity"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
    </resultMap>

    <select id="selectAll" resultMap="ConversationMap" parameterType="map">
        SELECT id, conversation_uuid, user_id, assistant_id, messages::text as messages, metadata::text as metadata,
        last_activity, created_at, updated_at
        FROM conversations
        WHERE 1=1
        <if test="userId != null">
            AND user_id = #{userId}
        </if>
        <if test="assistantId != null and assistantId != ''">
            AND assistant_id = #{assistantId}
        </if>
        <if test="dateFrom != null and dateFrom != ''">
            AND last_activity &gt;= #{dateFrom}
        </if>
        <if test="dateTo != null and dateTo != ''">
            AND last_activity &lt;= #{dateTo}
        </if>
        <!-- fulltext search using precomputed search_vector in table -->
        <if test="q != null and q != ''">
            AND search_vector @@ plainto_tsquery('simple', #{q})
        </if>
        ORDER BY last_activity DESC
    </select>

    <select id="selectById" parameterType="long" resultMap="ConversationMap">
        SELECT id, conversation_uuid, user_id, assistant_id, messages::text as messages, metadata::text as metadata,
                last_activity, created_at, updated_at
        FROM conversations
        WHERE id = #{id}
    </select>

    <select id="selectByUuid" parameterType="string" resultMap="ConversationMap">
        SELECT id, conversation_uuid, user_id, assistant_id, messages::text as messages, metadata::text as metadata,
                last_activity, created_at, updated_at
        FROM conversations
        WHERE conversation_uuid = #{conversationUuid}::uuid
    </select>

    <insert id="insertConversation" parameterType="com.example.entity.Conversation" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO conversations (conversation_uuid, user_id, assistant_id, messages, metadata, last_activity, created_at, updated_at)
        VALUES (#{conversationUuid}::uuid, #{userId}, #{assistantId}, #{messages}::jsonb, #{metadata}::jsonb, #{lastActivity}, now(), now())
    </insert>

    <update id="updateConversation" parameterType="com.example.entity.Conversation">
        UPDATE conversations
        SET
            user_id = #{userId},
            assistant_id = #{assistantId},
            messages = #{messages}::jsonb,
            metadata = #{metadata}::jsonb,
            last_activity = #{lastActivity},
            updated_at = now()
        WHERE id = #{id}
    </update>

    <delete id="deleteConversation" parameterType="long">
        DELETE FROM conversations WHERE id = #{id}
    </delete>

    <delete id="deleteBatch" parameterType="list">
        DELETE FROM conversations WHERE id IN
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <!-- Append a single JSON message to messages array by conversation_uuid
         params: conversationUuid (String), messageJson (String of JSON)
    -->
    <update id="appendMessageByUuid" parameterType="map">
        UPDATE conversations
        SET messages = COALESCE(messages, '[]'::jsonb) || (#{messageJson}::jsonb),
            updated_at = now(),
            last_activity = GREATEST(
                    COALESCE(last_activity, now()),
                    COALESCE(
                            (#{messageTimestamp}::timestamptz),
                            now()
                        )
                )
        WHERE conversation_uuid = #{conversationUuid}::uuid
    </update>

</mapper>
