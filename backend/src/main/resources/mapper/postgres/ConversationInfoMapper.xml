<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.postgres.ConversationInfoMapper">

    <resultMap id="ConversationNameMap" type="com.example.entity.ConversationInfo">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="conversation_uuid" property="conversationUuid"/>
        <result column="user_id" property="userId"/>
        <result column="is_primary" property="isPrimary"/>
        <result column="visibility" property="visibility"/>
        <result column="description" property="description"/>
        <result column="tags" property="tags"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
    </resultMap>

    <select id="selectByUserId" parameterType="long" resultMap="ConversationNameMap">
        SELECT id, name, conversation_uuid, user_id, is_primary, visibility, description, tags::text AS tags, created_at, updated_at
        FROM conversation_names
        WHERE user_id = #{userId}
        ORDER BY is_primary DESC NULLS LAST, created_at DESC
    </select>

    <select id="selectById" parameterType="long" resultMap="ConversationNameMap">
        SELECT id, name, conversation_uuid, user_id, is_primary, visibility, description, tags::text AS tags, created_at, updated_at
        FROM conversation_names
        WHERE id = #{id}
    </select>

    <insert id="insertConversationName" parameterType="com.example.entity.ConversationInfo" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO conversation_names (name, conversation_uuid, user_id, is_primary, visibility, description, tags, created_at, updated_at)
        VALUES (#{name}, #{conversationUuid}, #{userId}, #{isPrimary}, #{visibility}, #{description}, #{tags}::jsonb, now(), now())
    </insert>

    <update id="updateConversationName" parameterType="com.example.entity.ConversationInfo">
        UPDATE conversation_names
        SET name = #{name},
            conversation_uuid = #{conversationUuid},
            user_id = #{userId},
            is_primary = #{isPrimary},
            visibility = #{visibility},
            description = #{description},
            tags = #{tags}::jsonb,
        updated_at = now()
        WHERE id = #{id}
    </update>

    <delete id="deleteConversationName" parameterType="long">
        DELETE FROM conversation_names WHERE id = #{id}
    </delete>

</mapper>
